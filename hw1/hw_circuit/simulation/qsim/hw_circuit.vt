// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/25/2023 19:58:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_vlg_sample_tst(
	START,
	sampler_tx
);
input  START;
output sampler_tx;

reg sample;
time current_time;
always @(START)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module counter_vlg_check_tst (
	LED_A,
	LED_B,
	LED_C,
	LED_D,
	LED_E,
	LED_F,
	LED_G,
	sampler_rx
);
input  LED_A;
input  LED_B;
input  LED_C;
input  LED_D;
input  LED_E;
input  LED_F;
input  LED_G;
input sampler_rx;

reg  LED_A_expected;
reg  LED_B_expected;
reg  LED_C_expected;
reg  LED_D_expected;
reg  LED_E_expected;
reg  LED_F_expected;
reg  LED_G_expected;

reg  LED_A_prev;
reg  LED_B_prev;
reg  LED_C_prev;
reg  LED_D_prev;
reg  LED_E_prev;
reg  LED_F_prev;
reg  LED_G_prev;

reg  LED_A_expected_prev;
reg  LED_B_expected_prev;
reg  LED_C_expected_prev;
reg  LED_D_expected_prev;
reg  LED_E_expected_prev;
reg  LED_F_expected_prev;
reg  LED_G_expected_prev;

reg  last_LED_A_exp;
reg  last_LED_B_exp;
reg  last_LED_C_exp;
reg  last_LED_D_exp;
reg  last_LED_E_exp;
reg  last_LED_F_exp;
reg  last_LED_G_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED_A_prev = LED_A;
	LED_B_prev = LED_B;
	LED_C_prev = LED_C;
	LED_D_prev = LED_D;
	LED_E_prev = LED_E;
	LED_F_prev = LED_F;
	LED_G_prev = LED_G;
end

// update expected /o prevs

always @(trigger)
begin
	LED_A_expected_prev = LED_A_expected;
	LED_B_expected_prev = LED_B_expected;
	LED_C_expected_prev = LED_C_expected;
	LED_D_expected_prev = LED_D_expected;
	LED_E_expected_prev = LED_E_expected;
	LED_F_expected_prev = LED_F_expected;
	LED_G_expected_prev = LED_G_expected;
end



// expected LED_A
initial
begin
	LED_A_expected = 1'bX;
end 

// expected LED_B
initial
begin
	LED_B_expected = 1'bX;
end 

// expected LED_C
initial
begin
	LED_C_expected = 1'bX;
end 

// expected LED_D
initial
begin
	LED_D_expected = 1'bX;
end 

// expected LED_E
initial
begin
	LED_E_expected = 1'bX;
end 

// expected LED_F
initial
begin
	LED_F_expected = 1'bX;
end 

// expected LED_G
initial
begin
	LED_G_expected = 1'bX;
end 
// generate trigger
always @(LED_A_expected or LED_A or LED_B_expected or LED_B or LED_C_expected or LED_C or LED_D_expected or LED_D or LED_E_expected or LED_E or LED_F_expected or LED_F or LED_G_expected or LED_G)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED_A = %b | expected LED_B = %b | expected LED_C = %b | expected LED_D = %b | expected LED_E = %b | expected LED_F = %b | expected LED_G = %b | ",LED_A_expected_prev,LED_B_expected_prev,LED_C_expected_prev,LED_D_expected_prev,LED_E_expected_prev,LED_F_expected_prev,LED_G_expected_prev);
	$display("| real LED_A = %b | real LED_B = %b | real LED_C = %b | real LED_D = %b | real LED_E = %b | real LED_F = %b | real LED_G = %b | ",LED_A_prev,LED_B_prev,LED_C_prev,LED_D_prev,LED_E_prev,LED_F_prev,LED_G_prev);
`endif
	if (
		( LED_A_expected_prev !== 1'bx ) && ( LED_A_prev !== LED_A_expected_prev )
		&& ((LED_A_expected_prev !== last_LED_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_A_expected_prev);
		$display ("     Real value = %b", LED_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED_A_exp = LED_A_expected_prev;
	end
	if (
		( LED_B_expected_prev !== 1'bx ) && ( LED_B_prev !== LED_B_expected_prev )
		&& ((LED_B_expected_prev !== last_LED_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_B_expected_prev);
		$display ("     Real value = %b", LED_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED_B_exp = LED_B_expected_prev;
	end
	if (
		( LED_C_expected_prev !== 1'bx ) && ( LED_C_prev !== LED_C_expected_prev )
		&& ((LED_C_expected_prev !== last_LED_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_C_expected_prev);
		$display ("     Real value = %b", LED_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED_C_exp = LED_C_expected_prev;
	end
	if (
		( LED_D_expected_prev !== 1'bx ) && ( LED_D_prev !== LED_D_expected_prev )
		&& ((LED_D_expected_prev !== last_LED_D_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_D_expected_prev);
		$display ("     Real value = %b", LED_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED_D_exp = LED_D_expected_prev;
	end
	if (
		( LED_E_expected_prev !== 1'bx ) && ( LED_E_prev !== LED_E_expected_prev )
		&& ((LED_E_expected_prev !== last_LED_E_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_E_expected_prev);
		$display ("     Real value = %b", LED_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED_E_exp = LED_E_expected_prev;
	end
	if (
		( LED_F_expected_prev !== 1'bx ) && ( LED_F_prev !== LED_F_expected_prev )
		&& ((LED_F_expected_prev !== last_LED_F_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_F_expected_prev);
		$display ("     Real value = %b", LED_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LED_F_exp = LED_F_expected_prev;
	end
	if (
		( LED_G_expected_prev !== 1'bx ) && ( LED_G_prev !== LED_G_expected_prev )
		&& ((LED_G_expected_prev !== last_LED_G_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED_G_expected_prev);
		$display ("     Real value = %b", LED_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED_G_exp = LED_G_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg START;
// wires                                               
wire LED_A;
wire LED_B;
wire LED_C;
wire LED_D;
wire LED_E;
wire LED_F;
wire LED_G;

wire sampler;                             

// assign statements (if any)                          
counter i1 (
// port map - connection between master ports and signals/registers   
	.LED_A(LED_A),
	.LED_B(LED_B),
	.LED_C(LED_C),
	.LED_D(LED_D),
	.LED_E(LED_E),
	.LED_F(LED_F),
	.LED_G(LED_G),
	.START(START)
);

// START
always
begin
	START = 1'b0;
	START = #5000 1'b1;
	#5000;
end 

counter_vlg_sample_tst tb_sample (
	.START(START),
	.sampler_tx(sampler)
);

counter_vlg_check_tst tb_out(
	.LED_A(LED_A),
	.LED_B(LED_B),
	.LED_C(LED_C),
	.LED_D(LED_D),
	.LED_E(LED_E),
	.LED_F(LED_F),
	.LED_G(LED_G),
	.sampler_rx(sampler)
);
endmodule

